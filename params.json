{"name":"Brick-lane","tagline":"Lightweight Cascading grid layout library","body":"# Brick Lane\r\n\r\n_Lightweight Cascading grid layout library_\r\n\r\nBrick Lane is a jQuery plugin to place elements in optimal position based on available vertical space, like fitting bricks in a wall.\r\n\r\nThe project is trying to create a lightweight, scalable version of the famous **Masonry** plugin.\r\n\r\n---\r\n\r\n## Usage\r\n\r\nFirst, include the **Brick Lane** plugin right after **jQuery** to get started.\r\n\r\n+ [jquery.brick-lane.min.js](https://github.com/squallstar/brick-lane/blob/master/src/jquery.brick-lane.min.js)\r\n\r\nThen, simply as\r\n\r\n```javascript\r\n$('.mycontainer').brickLane();\r\n```\r\n   \r\nWhere you container has a structure similar to:\r\n\r\n```html\r\n<div class=\"mycontainer\">\r\n\t<div class=\"item\">1</div>\r\n\t<div class=\"item\">2</div>\r\n\t<div class=\"item\">3</div>\r\n\t<div class=\"some-other-item\">4</div>\r\n</div>\r\n```\r\n\r\n---\r\n\r\n## Options\r\n\r\n### ``columnWidth``\r\n\r\nBy default, **Brick Lane** will use the width of your first element as **column size**.\r\n\r\nIf you wish to adjust the column size, you can pass the ``columnWidth`` option to the plugin as a ``number`` or a ``function`` that should return a number:\r\n\t\r\n```javascript\r\n// As a number\r\n$('.mycontainer').brickLane({\r\n    columnWidth: 350\r\n});\r\n\r\n// Or as a function\r\n$('.mycontainer').brickLane({\r\n    columnWidth: function(){\r\n    \treturn 350;\r\n    }\r\n});\r\n```\r\n\r\n---\r\n\r\n### ``itemSelector``\r\n\r\nBy default, **Brick Lane** will use the ``first level children`` as initial items to be added to the instance. You can amend the behaviour by passing a **jQuery selector** as ``itemSelector`` option:\r\n\t\r\n```javascript\r\n$('.mycontainer').brickLane({\r\n    itemSelector: 'article'\r\n});\r\n```\r\n\r\n---\r\n\r\n### ``isResizeBound``\r\n\r\nBinds layout to window resizing (defaults to true)\r\n\t\r\n```javascript\r\n$('.mycontainer').brickLane({\r\n    isResizeBound: false\r\n});\r\n```\r\n\r\n---\r\n\r\n## Methods\r\n\r\nYou can access the instance anytime by calling it like:\r\n\r\n```javascript\r\n$('.mycontainer').brickLane();\r\n```\r\n\r\nMethods can be called by passing the method name as first argument, following parameters after that. Please check the methods here below.\r\n\r\n### append (element)\r\n\r\nAppends and lay outs the given element to the instance.\r\n\r\n```javascript\r\nvar newEl = $('.some-article');\r\n\r\n$('.mycontainer').brickLane('append', newEl);\r\n```\r\n\r\n---\r\n\r\n### appended (element)\r\n\r\nIf you have your own way (perhaps a framework) to add elements to the DOM, you can just tell the plugin to lay out the item by using the ``appended`` method instead.\r\n\r\n```javascript\r\nvar newEl = $('.some-article');\r\n\r\n$('.mycontainer').append(newEl);\r\n\r\n$('.mycontainer').brickLane('appended', newEl);\r\n```\r\n\r\n---\r\n\r\n### layout\r\n\r\nForce the layout of all elements.\r\n\r\n```javascript\r\n$('.mycontainer').brickLane('layout');\r\n```\r\n\r\n---\r\n\r\n### destroy\r\n\r\nDestroys the instance and reposition all items like they were before.\r\n\r\n```javascript\r\n$('.mycontainer').brickLane('destroy');\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}